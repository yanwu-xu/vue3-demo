{
  "compilerOptions": {
    // 指定ECMAScript目标版本
    "target": "esnext",
    // 指定生成哪个模块系统代码
    "module": "esnext",
    // 决定如何处理模块。
    "moduleResolution": "node",
    // 是否启动所有严格检查的总开关
    "strict": true,
    // 是否区分文件系统大小写规则
    "forceConsistentCasingInFileNames": true,
    // 是否允许从没有默认导出的模块中默认导入
    "allowSyntheticDefaultImports": true,
    // 是否启用对函数类型的严格检查
    "strictFunctionTypes": false,
    // 指定 jsx 格式
    "jsx": "preserve",
    // 用于解析非绝对模块名的基本目录
    "baseUrl": "./",
    // 是否对js文件进行编译
    "allowJs": true,
    // 是否生成相应的Map映射的文件
    "sourceMap": true,
    // 是否通过为所有导入模块创建命名空间对象，允许CommonJS和ES模块之间的互操作性，开启改选项时，也自动开启allowSyntheticDefaultImports选项
    "esModuleInterop": true,
    // 是否解析 JSON 模块
    "resolveJsonModule": true,
    // 检查只声明、未使用的局部变量(只提示不报错
    "noUnusedLocals": true,
    // 是否检查未使用的参数
    "noUnusedParameters": true,
    // 是否启用对装饰器的实验性支持
    "experimentalDecorators": true,
    // lib用来指定项目中要使用的库
    "lib": [
      "dom",
      "esnext"
    ],
    // 加载的声明文件包
    "types": [
      "vite/client"
    ],
    // 声明文件目录，默认时node_modules/@types
    "typeRoots": [
      "./node_modules/@types/",
      "./types"
    ],
    // 是否禁止隐式的any类型
    "noImplicitAny": false,
    // 是否跳过声明文件的类型检查
    "skipLibCheck": true,
    // 用于设置模块名称基于baseUrl的路径映射关系
    "paths": {
      "@/*": [
        "src/*"
      ],
      "/#/*": [
        "types/*"
      ]
    }
  },
  "includes": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "mock/**/*.ts",
    "components.d.ts",
    "vite.config.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/*.js"
  ]
}
